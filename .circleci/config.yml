---

docker_image: &docker_image
  docker:
    - image: circleci/buildpack-deps:stable-curl

docker_login: &docker_login
  name: "Docker Login"
  command: |
    docker login -u $DOCKER_USER -p $DOCKER_PASS

build_latest: &build_latest
  name: "Docker build and push asicsdigital/hermes:latest"
  command: |
    docker build --tag $IMAGE_NAME:latest .
    export PATH=$PATH:~/bin
    mkdir -p ~/project/test-results/goss
    dgoss run -it  $IMAGE_NAME:latest | tail -n +3 >> ~/project/test-results/goss/report.xml
    docker push $IMAGE_NAME:latest

build_core_stable: &build_core_stable
  name: "Docker build and push asicsdigital/hermes:stable"
  command: |
    docker build --tag $IMAGE_NAME:stable .
    export PATH=$PATH:~/bin
    mkdir -p ~/project/test-results/goss
    dgoss run -it  $IMAGE_NAME:stable | tail -n +3 >> ~/project/test-results/goss/report.xml
    docker push $IMAGE_NAME:stable

build_core_stable_node: &build_core_stable_node
  name: "Docker build and push asicsdigital/hermes:stable_node"
  command: |
    docker build --tag $IMAGE_NAME:stable_node .
    export PATH=$PATH:~/bin
    mkdir -p ~/project/test-results/goss
    dgoss run -it  $IMAGE_NAME:stable_node | tail -n +3 >> ~/project/test-results/goss/report.xml
    docker push $IMAGE_NAME:stable_node

build_core_tagged: &build_core_tagged
  name: "Docker build and push asicsdigital/hermes tagged releases"
  command: |
    docker build --tag $IMAGE_NAME:$CIRCLE_TAG .
    export PATH=$PATH:~/bin
    mkdir -p ~/project/test-results/goss
    dgoss run -it $IMAGE_NAME:$CIRCLE_TAG | tail -n +3 >> ~/project/test-results/goss/report.xml

    docker tag $IMAGE_NAME:$CIRCLE_TAG $IMAGE_NAME:$(echo $CIRCLE_TAG | sed 's/v//')
    docker tag $IMAGE_NAME:$CIRCLE_TAG $IMAGE_NAME:$(echo $CIRCLE_TAG | cut -d\. -f 1,2 | sed 's/v//')
    docker tag $IMAGE_NAME:$CIRCLE_TAG $IMAGE_NAME:$(echo $CIRCLE_TAG | cut -d\. -f 1   | sed 's/v//')
    echo "pushing tags...."
    docker push $IMAGE_NAME:$(echo $CIRCLE_TAG | sed 's/v//')
    docker push $IMAGE_NAME:$(echo $CIRCLE_TAG | cut -d\. -f 1,2 | sed 's/v//')
    docker push $IMAGE_NAME:$(echo $CIRCLE_TAG | cut -d\. -f 1   | sed 's/v//')

build_terraform_image: &build_terraform_image
  name: "Docker build and push Hermes Terraform image - asicsdigital/hermes:terraform-0.X.X"
  command: |
    echo "Building image $IMAGE_NAME:$TAG"
    docker build --build-arg TF_VERSION=$TF_VERSION --tag $IMAGE_NAME:$TAG .
    export PATH=$PATH:~/bin
    mkdir -p ~/project/test-results/goss
    dgoss run -it $IMAGE_NAME:$TAG | tail -n +3 >> ~/project/test-results/goss/report.xml
    docker push $IMAGE_NAME:$TAG

build_branches: &build_branches
  name: "Docker build and push feature branch"
  command: |
    docker build -t $IMAGE_NAME:$CIRCLE_USERNAME-$TAG-$CIRCLE_SHA1 .
    docker push $IMAGE_NAME:$CIRCLE_USERNAME-$TAG-$CIRCLE_SHA1

project_env_vars: &project_env_vars
  environment:
    IMAGE_NAME: asicsdigital/hermes
    GOSS_PATH:  /home/circleci/bin/goss
    GOSS_FILES_STRATEGY: cp
    GOSS_OPTS: --format junit
    GOSS_FILES_PATH: tests

install_goss: &install_goss
  name: Install goss
  command: |
    # rather than give internet scripts SU rights, we install to local user bin and add to path
    mkdir -p ~/bin
    export GOSS_DST=~/bin
    export PATH=$PATH:~/bin
    curl -fsSL https://goss.rocks/install | sh
    goss -version

run_tests: &run_tests
  name: "Run goss Tests"
  command: |
    docker build . -t hermes:$TAG
    export PATH=$PATH:~/bin
    mkdir -p ~/project/test-results/goss
    dgoss run -it hermes:$TAG | tail -n +3 >> ~/project/test-results/goss/report.xml

workflows:
  version: 2
  build_and_push:
    jobs:
      - build-v1.X:
          context: org-global
          filters:
            branches:
              only: master

      - build_feature_branch:
          context: org-global
          filters:
            branches:
              ignore: master

      - deploy-stable:
          context: org-global
          filters:
            tags:
              only: stable
            branches:
              ignore: /.*/

      - deploy-core-tagged:
          context: org-global
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/

      - deploy-node:
          context: org-global
          filters:
            tags:
              only: /^deploy-node-.+/
            branches:
              ignore: /.*/

version: 2
jobs:
  build-v1.X:
    <<: *docker_image
    <<: *project_env_vars
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *docker_login
      - run:
          <<: *install_goss
      - run:
          working_directory: ~/project/1.X
          <<: *build_latest

  deploy-stable:
    <<: *docker_image
    <<: *project_env_vars
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *docker_login
      - run:
          <<: *install_goss
      - run:
          working_directory: ~/project/1.X
          environment:
          <<: *build_core_stable

      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.12.2
            TAG: terraform-0.12.2
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.12.1
            TAG: terraform-0.12.1
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.12.0
            TAG: terraform-0.12.0
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.14
            TAG: terraform-0.11.14
          <<: *build_terraform_image

      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.13
            TAG: terraform-0.11.13
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.12
            TAG: terraform-0.11.12
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.11
            TAG: terraform-0.11.11
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.10
            TAG: terraform-0.11.10
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.9
            TAG: terraform-0.11.9
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.8
            TAG: terraform-0.11.8
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.7
            TAG: terraform-0.11.7
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.6
            TAG: terraform-0.11.6
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.5
            TAG: terraform-0.11.5
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.4
            TAG: terraform-0.11.4
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.3
            TAG: terraform-0.11.3
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.2
            TAG: terraform-0.11.2
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.11.1
            TAG: terraform-0.11.1
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TF_VERSION: 0.10.8
            TAG: terraform-0.10.8
          <<: *build_terraform_image
      - run:
          working_directory: ~/project/1.X-Node/terraform
          environment:
            TF_VERSION: 0.10.8
            TAG: terraform-0.10.8
          <<: *build_terraform_image

  deploy-core-tagged:
    <<: *docker_image
    <<: *project_env_vars
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *docker_login
      - run:
          <<: *install_goss
      - run:
          working_directory: ~/project/1.X
          environment:
          <<: *build_core_tagged

  build_feature_branch:
    <<: *docker_image
    <<: *project_env_vars
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *docker_login
      - run:
          <<: *install_goss
      - run:
          working_directory: ~/project/1.X
          environment:
            TAG: core
          <<: *run_tests
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TAG: terraform
          <<: *run_tests
      - run:
          working_directory: ~/project/1.X
          environment:
            TAG: core
          <<: *build_branches
      - run:
          working_directory: ~/project/1.X/terraform
          environment:
            TAG: terraform
          <<: *build_branches
      - store_test_results:
          path: test-results

  deploy-node:
    <<: *docker_image
    <<: *project_env_vars
    steps:
      - checkout
      - setup_remote_docker
      - run:
          <<: *docker_login
      - run:
          <<: *install_goss
      - run:
          working_directory: ~/project/1.X-Node
          environment:
          <<: *build_core_stable_node
